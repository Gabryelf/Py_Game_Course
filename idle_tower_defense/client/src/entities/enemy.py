from dataclasses import dataclass
from typing import Tuple, List
import math
from client.src.utils.config import config
from client.src.utils.logger import logger


@dataclass
class EnemyType:
    """–¢–∏–ø –≤—Ä–∞–≥–∞ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""
    name: str
    health: float
    speed: float
    color: Tuple[int, int, int]  # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
    reward: int
    experience: int


class Enemy:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –≤—Ä–∞–≥–∞ - –¢–û–õ–¨–ö–û –ª–æ–≥–∏–∫–∞"""

    # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –≤—Ä–∞–≥–æ–≤
    TYPES = {
        "goblin": EnemyType("Goblin", 2, 0.5, (50, 180, 50), 5, 10),
        "orc": EnemyType("Orc", 4, 0.8, (180, 50, 50), 10, 20),
        "boss": EnemyType("Boss", 15, 0.4, (180, 50, 180), 30, 50)
    }

    def __init__(self, enemy_type: str, path: List[Tuple[float, float]]):
        self.type = self.TYPES[enemy_type]
        self.health = self.type.health
        self.max_health = self.type.health
        self.speed = self.type.speed
        self.color = self.type.color

        # –ü–æ–∑–∏—Ü–∏—è –∏ –¥–≤–∏–∂–µ–Ω–∏–µ
        self.path = path
        self.current_path_index = 0
        self.position = self.path[0] if self.path else (0, 0)
        self.radius = 20
        self.reached_end = False

        # –û–¢–õ–ê–î–ö–ê
        logger.info(f"üéØ Enemy created: {self.type.name}")
        logger.info(f"üéØ Enemy path: {self.path}")
        logger.info(f"üéØ Enemy start position: {self.position}")
        logger.info(f"üéØ Enemy target: {self.path[-1] if self.path else 'None'}")

        logger.debug(f"Enemy {self.type.name} created")

    def take_damage(self, damage: float) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –≤—Ä–∞–≥ —É–º–µ—Ä"""
        self.health -= damage
        logger.debug(f"Enemy {self.type.name} took {damage} damage. Health: {self.health}")

        if self.health <= 0:
            logger.info(f"Enemy {self.type.name} defeated!")
            return True
        return False

    def update(self, delta_time: float) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Ä–∞–≥–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –≤—Ä–∞–≥ –¥–æ—à–µ–ª –¥–æ –∫–æ–Ω—Ü–∞"""
        if self.reached_end:
            return True

        if self.current_path_index >= len(self.path) - 1:
            self.reached_end = True
            logger.info(f"Enemy {self.type.name} reached the tower!")
            return True

        target_pos = self.path[self.current_path_index + 1]
        dx = target_pos[0] - self.position[0]
        dy = target_pos[1] - self.position[1]
        distance = math.sqrt(dx * dx + dy * dy)

        # –ï—Å–ª–∏ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ
        if distance < 2.0:
            self.current_path_index += 1
            if self.current_path_index >= len(self.path) - 1:
                self.reached_end = True
                logger.info(f"Enemy {self.type.name} reached the tower!")
                return True
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏
            return self.update(delta_time)

        # –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
        if distance > 0:
            direction_x = dx / distance
            direction_y = dy / distance

            # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ delta_time –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
            move_distance = self.speed * 100 * delta_time
            self.position = (
                self.position[0] + direction_x * move_distance,
                self.position[1] + direction_y * move_distance
            )

        return False

    def is_alive(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∂–∏–≤ –ª–∏ –≤—Ä–∞–≥"""
        return self.health > 0

    @property
    def center_position(self) -> Tuple[float, float]:
        """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏ —Ä–∞—Å—á–µ—Ç–æ–≤"""
        return (self.position[0], self.position[1])

    @property
    def health_ratio(self) -> float:
        """–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É"""
        return self.health / self.max_health